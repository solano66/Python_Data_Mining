#!/usr/bin/env python3
# -*- coding: utf-8 -*-

x = 3.14

y = -0.001

x + y # 3.1390000000000002

# 這是因為電腦使用二進制來表示浮點數，會導致浮點數表示的精度問題。

# 浮點數表示方式
# 浮點數在電腦內部是使用二進制表示的，但並不是所有的小數都能精確地表示。例如，數字 3.14 和 -0.001 在二進制中會被表示為近似值，而不是精確值。當進行加法運算時，這些近似值的誤差就會累積，導致結果也存在微小的誤差。

# 解釋這個現象的原因
# 二進制近似:

# 3.14 在二進制浮點數表示中實際上是個接近於 3.14 的數字，而不是精確的 3.14。
# 同樣，-0.001 也不是精確的，而是接近於 -0.001 的某個數字。
# 浮點數加法:

# 當你把這兩個浮點數相加時，電腦實際上是將這兩個近似值相加，因此結果也會稍微有些不準確，最終得到 3.1390000000000002 這樣的結果，而不是 3.139。

#### 如何避免這類問題
# 使用Decimal模組:
# 如果需要高精度的浮點數運算，可以使用 Python 的 decimal 模組來處理。例如：
from decimal import Decimal

x = Decimal('3.14')
y = Decimal('-0.001')
result = x + y
print(result)  # 3.139

# 四捨五入:
# 如果需要高精度的浮點數運算，可以使用 Python 的 decimal 模組來處理。例如：
x = 3.14
y = -0.001
result = round(x + y, 3)
print(result)  # 3.139


z = 2

x - z

x * y

x / z
